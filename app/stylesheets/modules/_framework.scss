// Framework
//
// Styleguide: 1.

// Framework variables
//
// $page-max-width   - The maximum width of the page.
// $col-count        - The number of columns in the default grid.
// $col-gutter-fluid - The width of column gutters (as a percentage).
// $col-gutter       - The width of column gutters (any unit).
//
// Styleguide: 1.1.
$page-max-width: 960px !default;
$col-count: 12 !default;
$col-gutter-fluid: 2.2% !default;
$col-gutter: 1.4rem !default;

// Framework Functions
//
// Styleguide 1.2.

// Deprecated: Returns the width of a cell based on the number of columns
// it spans. This function is only compatible with fluid gutters.
//
// $col-span          - How many column lengths this cell will span across.
// $custom-col-count  - The total number of columns in the row.
// $custom-col-gutter - Width (%) of gutters.
//
// Styleguide 1.2.1.
@function get-column-width($col-span, $custom-col-count: $col-count, $custom-col-gutter: $col-gutter-fluid) {
	$single-col-width: (100% - ($custom-col-count - 1) * $custom-col-gutter) / $custom-col-count;

	@return $single-col-width * $col-span + ($col-span - 1) * $custom-col-gutter;
}

// Framework Mixins
//
// Styleguide 1.3.

// Clears floats by adding ::before and/or ::after pseudo-selectors
//
// $which - Which floats to clear. Can be "before", "after", or "all".
//
// Compatibility untested.
//
// Styleguide 1.3.1.
@mixin clear-floats($before: true, $after: true) {
	@if ($before) {
		&:before {
			content: '';
			display: table;
			line-height: 0;
			clear: both;
		}
	}

	@if ($after) {
		&:after {
			content: '';
			display: table;
			line-height: 0;
			clear: both;
		}
	}
}

// Creates a full-width block that will act as a wrapper for a columns
//
// Compatibility untested.
//
// Styleguide 1.3.2
@mixin row() {
	@include clear-floats;

	display: block;
	-webkit-box-sizing: border-box;
	   -moz-box-sizing: border-box;
	        box-sizing: border-box;
}

// Provides a width for the specified number of columns.
//
// $col-span          - How many columns this cell will span across.
// $custom-col-count  - The total number of columns in the row.
// $custom-col-gutter - The width of the gutters.
//
// Compatibility untested.
//
// Styleguide 1.3.3.
@mixin column-width($col-span, $custom-col-count: $col-count, $custom-col-gutter: $col-gutter) {
	$base-width-percentage: $col-span / $custom-col-count * 100;

	// Old browsers must use fluid gutters
	width: $base-width-percentage - ($col-gutter-fluid * (1 - $base-width-percentage / 100)) - .001%;

	// New browsers can use fluid or fixed gutters
	@if unit($custom-col-gutter) != '%' {
		width: calc(#{$base-width-percentage * 1%} - #{$custom-col-gutter * (1 - $base-width-percentage / 100)} - .1px);
	}
}

// Formats element as a column within a row.

// $col-span          - How many columns this cell will span across.
// $custom-col-count  - The total number of columns in the row.
// $custom-col-gutter - The width of the gutters.
//
// Compatibility untested.
//
// Styleguide 1.3.4.
@mixin column($col-span, $custom-col-count: $col-count, $custom-col-gutter: $col-gutter) {
	@include column-width($col-span, $custom-col-count, $custom-col-gutter);

	float: left;
	-webkit-box-sizing: border-box;
	   -moz-box-sizing: border-box;
	        box-sizing: border-box;

	margin-right: $col-gutter-fluid;
	margin-right: calc(#{$custom-col-gutter});

	&:last-child {
		float: right;
		margin-right: 0;
	}
	&:first-child:last-child {
		float: left;
	}
}

// Creates a centered column within a row.
//
// $col-span         - How many columns this cell will span across.
// $custom-col-count - The total number of columns in the row.
//
// Compatibility untested.
//
// Styleguide 1.3.5.
@mixin center-column($col-span, $custom-col-count: $col-count) {
	@include column-width($col-span, $custom-col-count);

	-webkit-box-sizing: border-box;
	   -moz-box-sizing: border-box;
	        box-sizing: border-box;

	margin: 0 auto;
}

// Moves a column to the right by the provided number of columns.
//
// $col-span          - How many columns this cell will be moved.
// $custom-col-count  - The total number of columns in the row.
// $custom-col-gutter - The width of the gutters.
//
// Compatibility untested.
//
// Styleguide 1.3.6.
@mixin push($col-span, $custom-col-count: $col-count, $custom-col-gutter: $col-gutter) {
	$push-ratio: $col-span / $custom-col-count;
	margin-left: $push-ratio * 100% + ($push-ratio * $col-gutter-fluid);
	margin-left: calc(#{$push-ratio * 100%} + ($push-ratio * #{$custom-col-gutter}));
	margin-right: ($push-ratio * 100% + ($push-ratio * $col-gutter-fluid)) * -1 + $col-gutter-fluid;
	margin-right: calc((#{$push-ratio * 100%} + ($push-ratio * #{$custom-col-gutter})) * -1 + #{$custom-col-gutter});

	&:last-child {
		float: left;
	}
}

// Moves a column to the left by the provided number of columns.
//
// $col-span          - How many columns this cell will be moved.
// $custom-col-count  - The total number of columns in the row.
// $custom-col-gutter - The width of the gutters.
//
// Compatibility untested.
//
// Styleguide 1.3.7.
@mixin pull($col-span, $custom-col-count: $col-count, $custom-col-gutter: $col-gutter) {
	@include push($col-span * -1, $custom-col-count, $custom-col-gutter);
}

// Formats direct child elements as equal-width cells in a row/column structure.
//
// $cols              - The number of cells per row.
// $custom-col-gutter - The width of the gutters.
//
// Compatibility untested.
//
// Styleguide 1.3.8.
@mixin grid($cols, $custom-col-gutter: $col-gutter) {
	$first-column-cell: #{$cols}n-#{$cols - 1};
	$last-column-cell: #{$cols}n;
	$last-row: -n + #{$cols};

	@include row;

	display: block;
	-webkit-box-sizing: border-box;
	   -moz-box-sizing: border-box;
	        box-sizing: border-box;

	> * {
		&:nth-child(1n) {
			@include column-width(1, $cols, $custom-col-gutter);
			clear: none;
			float: left;
			box-sizing: border-box;
			-moz-box-sizing: border-box;

			margin-right: $col-gutter-fluid;
			margin-right: calc(#{$custom-col-gutter});
			margin-bottom: $col-gutter-fluid;
			margin-bottom: calc(#{$custom-col-gutter});
		}

		// First cell of each row should clear cells above
		&:nth-child(#{$first-column-cell}) {
			clear: both;
		}

		// No right margin on last cell of each row
		&:nth-child(#{$last-column-cell}) {
			float: right;
			margin-right: 0;
		}

		// No bottom margin on last row
		&:nth-last-child(#{$last-row}) {
			margin-bottom: 0;
		}
	}
}

// Creates a row with an arbitrary number of columns where each column has the
// same width.
//
// $custom-col-gutter - The width of the gutters.
//
// Compatibility untested.
//
// Styleguide 1.3.9.
@mixin equal-width-columns($custom-col-gutter: $col-gutter) {
	display: table;
	table-layout: fixed;
	border-spacing: $custom-col-gutter 0;
	margin-left: -$custom-col-gutter;
	width: calc(100% + #{$custom-col-gutter * 2});

	> * {
		display: table-cell;
		width: 2%;
	}
}

// Replaces an element's background with a grid for testing alignment.
//
// $custom-col-count  - The total number of columns in the row.
// $custom-col-gutter - The width of the gutters (only percentage widths).
// $overlay-color     - The color of the columns.
//
// Compatibility untested.
//
// Styleguide 1.3.10.
@mixin grid-overlay($custom-col-count: $col-count, $custom-col-gutter: $col-gutter-fluid, $overlay-color: rgba(#777, .1)) {
	$column-width: get-column-width(1, $custom-col-count, $custom-col-gutter);
	$gradient-string: $overlay-color 0, $overlay-color $column-width;

	@for $i from 1 to $custom-col-count {
		$start-width: get-column-width($i, $custom-col-count, $custom-col-gutter);
		$end-width: get-column-width($i + 1, $custom-col-count, $custom-col-gutter);
		$gradient-string: $gradient-string, rgba(#fff, 0) $start-width, rgba(#fff, 0) $start-width + $custom-col-gutter, $overlay-color $start-width + $custom-col-gutter, $overlay-color $end-width;
	}

	background: -webkit-linear-gradient(left, $gradient-string);
	background: -moz-linear-gradient(left, $gradient-string);
	background: -o-linear-gradient(left, $gradient-string);
	background: -ms-linear-gradient(left, $gradient-string);
	background: unquote('linear-gradient(to right, #{$gradient-string})'); // Contains quotes to avoid accidental use of Compass linear-gradient function
}
